package org.bimserver.obj;

import org.bimserver.models.geometry.GeometryData;
import org.bimserver.models.geometry.GeometryInfo;
import org.bimserver.models.ifc2x3tc1.IfcAnnotation;
import org.bimserver.models.ifc2x3tc1.IfcProduct;
import org.bimserver.plugins.renderengine.RenderEngineException;
import org.bimserver.plugins.serializers.ProgressReporter;
import org.bimserver.plugins.serializers.SerializerException;
import org.bimserver.plugins.serializers.AbstractGeometrySerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;

public class BinaryObjSerializer extends AbstractGeometrySerializer {
    private static final Logger LOGGER = LoggerFactory.getLogger(BinaryObjSerializer.class);
    private OutputStream outputStream;

    public BinaryObjSerializer() {
    }

    @Override
    protected boolean write(OutputStream outputStream, ProgressReporter progressReporter) throws SerializerException {
        LOGGER.info("Starting OBJ serialization");
        this.outputStream = outputStream;

        int step = 0;
        for (IfcProduct ifcProduct : model.getAllWithSubTypes(IfcProduct.class)) {
            if (checkGeometry(ifcProduct, false)) {
                GeometryInfo geometryInfo = ifcProduct.getGeometry();
                GeometryData data = geometryInfo.getData();

                if (step == 0) {
                    LOGGER.info("product is: " + ifcProduct.getName() + " (" + ifcProduct.getGlobalId() + ")");
                    LOGGER.info("triangleCount: "  + geometryInfo.getPrimitiveCount() );
                    LOGGER.info("nrVertices: "  + data.getNrVertices() + " ,vertices len: " + data.getVertices().getData().length);
                    LOGGER.info("Nrindices: "  + data.getNrIndices() + " ,indices len: " + data.getIndices().getData().length);
                    try {

                        print("# Simple OBJ file generated by BIMserver\n");
                        print("v 0.0 2.0 2.0\n");
                        print("v 0.0 0.0 2.0\n");
                        print("v 2.0 0.0 2.0\n");
                        print("v 2.0 2.0 2.0\n");
                        print("v 0.0 2.0 0.0\n");
                        print("v 0.0 0.0 0.0\n");
                        print("v 2.0 0.0 0.0\n");
                        print("v 2.0 2.0 0.0\n");
                        print("f 1 2 3 4\n");
                        print("f 8 7 6 5\n");
                        print("f 4 3 7 8\n");
                        print("f 5 1 4 8\n");
                        print("f 5 6 2 1\n");
                        print("f 2 6 7 3\n");

                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }

                }

            }
            step++;
        }


        return false;
    }

    private void print(String line) throws IOException {
        byte[] bytes = line.getBytes(StandardCharsets.UTF_8);
        this.outputStream.write(bytes, 0, bytes.length);
    }

    private boolean checkGeometry(IfcProduct ifcProduct, boolean print) {
        String name = ifcProduct.eClass().getName();
        if (name.equals("IfcOpeningElement") || name.equals("IfcBuildingStorey") || name.equals("IfcBuilding")) {
            return false;
        }
        GeometryInfo geometryInfo = ifcProduct.getGeometry();
        if (geometryInfo == null) {
            if (ifcProduct instanceof IfcAnnotation) {
                return false;
            }
            if (print) {
                LOGGER.info("No GeometryInfo for " + name);
            }
            return false;
        }
        GeometryData geometryData = geometryInfo.getData();
        if (geometryData == null) {
            if (print) {
                LOGGER.info("No GeometryData for " + name);
            }
            return false;
        }
        if (geometryData.getVertices() == null) {
            if (print) {
                LOGGER.info("No Vertices for " + name);
            }
            return false;
        }
        return true;
    }
}
